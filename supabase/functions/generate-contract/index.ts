import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { jsPDF } from 'https://esm.sh/jspdf@2.5.1'
import { format } from 'https://esm.sh/date-fns@2.30.0'
import { fr } from 'https://esm.sh/date-fns@2.30.0/locale'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle OPTIONS request for CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log("üîç D√©but g√©n√©ration contrat");
    
    // Get the request body
    const { booking_id } = await req.json()
    if (!booking_id) {
      throw new Error('Booking ID is required')
    }

    console.log("üìã Booking ID:", booking_id);

    // Initialize Supabase client with the service key
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      { auth: { persistSession: false } }
    )

    // ‚úÖ √âTAPE 1: R√©cup√©rer la r√©servation
    console.log("üîç R√©cup√©ration des donn√©es de r√©servation...");
    const { data: booking, error: bookingError } = await supabaseAdmin
      .from('bookings')
      .select('*')
      .eq('id', booking_id)
      .single()

    if (bookingError) {
      console.error("‚ùå Erreur r√©cup√©ration r√©servation:", bookingError);
      throw bookingError;
    }
    if (!booking) {
      console.error("‚ùå R√©servation non trouv√©e");
      throw new Error('Booking not found');
    }

    console.log("‚úÖ R√©servation trouv√©e:", booking.id);

    // ‚úÖ √âTAPE 2: R√©cup√©rer l'√©quipement
    const { data: equipment, error: equipmentError } = await supabaseAdmin
      .from('equipments')
      .select('*')
      .eq('id', booking.equipment_id)
      .single()

    if (equipmentError) {
      console.error("‚ùå Erreur r√©cup√©ration √©quipement:", equipmentError);
      throw equipmentError;
    }

    console.log("üè† √âquipement:", equipment?.title);

    // ‚úÖ √âTAPE 3: R√©cup√©rer le locataire
    const { data: renter, error: renterError } = await supabaseAdmin
      .from('profiles')
      .select('*')
      .eq('id', booking.renter_id)
      .single()

    if (renterError) {
      console.error("‚ùå Erreur r√©cup√©ration locataire:", renterError);
      throw renterError;
    }

    console.log("üë§ Locataire:", renter?.first_name, renter?.last_name);

    // ‚úÖ √âTAPE 4: R√©cup√©rer le propri√©taire
    const { data: owner, error: ownerError } = await supabaseAdmin
      .from('profiles')
      .select('*')
      .eq('id', equipment.owner_id)
      .single()

    if (ownerError) {
      console.error("‚ùå Erreur r√©cup√©ration propri√©taire:", ownerError);
      throw ownerError;
    }

    console.log("‚úÖ Propri√©taire trouv√©:", owner?.first_name, owner?.last_name);

    // ‚úÖ √âTAPE 5: R√©cup√©rer les emails depuis auth.users
    console.log("üìß R√©cup√©ration des emails...");
    
    // Email du locataire
    const { data: renterUser, error: renterUserError } = await supabaseAdmin.auth.admin.getUserById(booking.renter_id)
    const renterEmail = renterUser?.user?.email
    
    if (renterUserError || !renterEmail) {
      console.error("‚ùå Erreur r√©cup√©ration email locataire:", renterUserError);
      throw new Error('Renter email not found');
    }

    // Email du propri√©taire  
    const { data: ownerUser, error: ownerUserError } = await supabaseAdmin.auth.admin.getUserById(equipment.owner_id)
    const ownerEmail = ownerUser?.user?.email
    
    if (ownerUserError || !ownerEmail) {
      console.error("‚ùå Erreur r√©cup√©ration email propri√©taire:", ownerUserError);
      throw new Error('Owner email not found');
    }

    console.log("‚úÖ Emails r√©cup√©r√©s:", { renterEmail, ownerEmail });

    // ‚úÖ √âTAPE 6: G√©n√©ration du PDF
    console.log("üìÑ G√©n√©ration du PDF...");
    const doc = new jsPDF()
    
    // Set up fonts and colors
    doc.setFont('helvetica')
    
    // Contract title
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.text('CONTRAT DE LOCATION DE MAT√âRIEL', 105, 20, { align: 'center' })
    
    // Contract reference
    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text(`R√©f√©rence: ${booking.id}`, 105, 30, { align: 'center' })
    doc.text(`Date: ${format(new Date(), 'dd/MM/yyyy', { locale: fr })}`, 105, 35, { align: 'center' })
    
    // Parties information
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('PARTIES AU CONTRAT', 20, 50)
    
    // Owner information
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('PROPRI√âTAIRE (Bailleur)', 20, 60)
    doc.setFont('helvetica', 'normal')
    doc.text(`Nom et Pr√©nom: ${owner?.first_name || ''} ${owner?.last_name || ''}`, 30, 70)
    doc.text(`Email: ${ownerEmail}`, 30, 75)
    doc.text(`T√©l√©phone: ${owner?.phone_number || 'Non sp√©cifi√©'}`, 30, 80)
    doc.text(`Adresse: ${owner?.address || 'Non sp√©cifi√©e'}`, 30, 85)
    doc.text(`Ville: ${owner?.city || ''}, ${owner?.country || ''}`, 30, 90)
    if (owner?.id_number) {
      doc.text(`Pi√®ce d'identit√©: ${owner.id_number}`, 30, 95)
    }
    
    // Renter information
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('LOCATAIRE (Preneur)', 20, 110)
    doc.setFont('helvetica', 'normal')
    doc.text(`Nom et Pr√©nom: ${renter?.first_name || ''} ${renter?.last_name || ''}`, 30, 120)
    doc.text(`Email: ${renterEmail}`, 30, 125)
    doc.text(`T√©l√©phone: ${renter?.phone_number || 'Non sp√©cifi√©'}`, 30, 130)
    doc.text(`Adresse: ${renter?.address || 'Non sp√©cifi√©e'}`, 30, 135)
    doc.text(`Ville: ${renter?.city || ''}, ${renter?.country || ''}`, 30, 140)
    if (renter?.id_number) {
      doc.text(`Pi√®ce d'identit√©: ${renter.id_number}`, 30, 145)
    }
    
    // Equipment information
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('OBJET DE LA LOCATION', 20, 160)
    doc.setFont('helvetica', 'normal')
    doc.text(`D√©signation: ${equipment?.title || ''}`, 30, 170)
    doc.text(`Description: ${equipment?.description || ''}`, 30, 175, { maxWidth: 160 })
    if (equipment?.brand) doc.text(`Marque: ${equipment.brand}`, 30, 185)
    if (equipment?.year) doc.text(`Ann√©e: ${equipment.year}`, 30, 190)
    doc.text(`√âtat: ${equipment?.condition || 'Bon √©tat'}`, 30, 195)
    
    // Rental terms
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('CONDITIONS DE LOCATION', 20, 210)
    doc.setFont('helvetica', 'normal')
    doc.text(`P√©riode: du ${format(new Date(booking.start_date), 'dd/MM/yyyy', { locale: fr })} au ${format(new Date(booking.end_date), 'dd/MM/yyyy', { locale: fr })}`, 30, 220)
    doc.text(`Prix de location: ${booking.total_price || 0} FCFA`, 30, 225)
    doc.text(`Caution (remboursable): ${booking.deposit_amount || 0} FCFA`, 30, 230)
    doc.text(`Montant total: ${(booking.total_price || 0) + (booking.deposit_amount || 0)} FCFA`, 30, 235)
    
    // Terms and conditions
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('CLAUSES ET CONDITIONS', 20, 250)
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    
    const terms = [
      '1. Le locataire s\'engage √† utiliser le mat√©riel conform√©ment √† sa destination.',
      '2. Le locataire est enti√®rement responsable du mat√©riel pendant la location.',
      '3. Tout dommage, perte ou vol sera √† la charge du locataire.',
      '4. La caution sera restitu√©e apr√®s v√©rification de l\'√©tat du mat√©riel.',
      '5. Tout retard entra√Ænera des p√©nalit√©s suppl√©mentaires.'
    ]
    
    let yPosition = 260
    terms.forEach(term => {
      doc.text(term, 30, yPosition, { maxWidth: 150 })
      yPosition += 7
    })

    // Signatures section
    yPosition += 10
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('SIGNATURES', 20, yPosition)
    
    yPosition += 15
    doc.setFont('helvetica', 'normal')
    doc.text('Le Propri√©taire:', 30, yPosition)
    doc.text('Le Locataire:', 120, yPosition)

    // Generate PDF as base64
    const pdfOutput = doc.output('datauristring')
    
    console.log("‚úÖ PDF g√©n√©r√© avec succ√®s");

    // ‚úÖ √âTAPE 7: Upload du PDF
    const fileName = `contract-${booking_id}-${Date.now()}.pdf`
    const contractPath = `contracts/${fileName}`
    const base64Data = pdfOutput.split(',')[1]
    
    console.log("üì§ Upload du PDF...");
    const { data: uploadData, error: uploadError } = await supabaseAdmin.storage
      .from('contracts')
      .upload(contractPath, Uint8Array.from(atob(base64Data), c => c.charCodeAt(0)), {
        contentType: 'application/pdf'
      })

    if (uploadError) {
      console.error("‚ùå Erreur upload PDF:", uploadError);
      throw uploadError;
    }

    // Get public URL
    const { data: publicUrlData } = supabaseAdmin.storage
      .from('contracts')
      .getPublicUrl(contractPath)

    const contractUrl = publicUrlData.publicUrl

    console.log("‚úÖ Contrat upload√©:", contractUrl);

    // ‚úÖ √âTAPE 8: Mise √† jour de la r√©servation
    const { error: updateError } = await supabaseAdmin
      .from('bookings')
      .update({ contract_url: contractUrl })
      .eq('id', booking_id)

    if (updateError) {
      console.error("‚ùå Erreur mise √† jour booking:", updateError);
    }

    // ‚úÖ √âTAPE 9: Envoi automatique de l'email
    console.log("üìß Envoi automatique du contrat par email...");
    
    try {
      const { data: emailData, error: emailError } = await supabaseAdmin.functions.invoke('send-contract-email', {
        body: {
          booking_id: booking_id,
          contract_url: contractUrl,
          renter_email: renterEmail,
          owner_email: ownerEmail,
          equipment_title: equipment?.title || '√âquipement'
        }
      });

      if (emailError) {
        console.error("‚ùå Erreur envoi email:", emailError);
        // Ne pas faire √©chouer toute la fonction pour un probl√®me d'email
      } else {
        console.log("‚úÖ Emails envoy√©s avec succ√®s:", emailData);
      }
    } catch (emailErr) {
      console.error("‚ùå Erreur lors de l'envoi email:", emailErr);
      // Continue quand m√™me, l'email n'est pas critique
    }

    console.log("üéâ G√©n√©ration de contrat termin√©e avec succ√®s!");

    // Return success response
    return new Response(
      JSON.stringify({
        success: true,
        pdf: contractUrl,
        message: 'Contract generated and emailed successfully',
        details: {
          contract_url: contractUrl,
          renter_email: renterEmail,
          owner_email: ownerEmail,
          equipment_title: equipment?.title
        }
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )

  } catch (error) {
    console.error("‚ùå Erreur g√©n√©ration contrat:", error);
    return new Response(
      JSON.stringify({
        error: error.message,
        success: false
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})