
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { jsPDF } from 'https://esm.sh/jspdf@2.5.1'
import { format } from 'https://esm.sh/date-fns@2.30.0'
import { fr } from 'https://esm.sh/date-fns@2.30.0/locale'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle OPTIONS request for CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    console.log("üîç D√©but g√©n√©ration contrat");
    
    // Get the request body
    const { booking_id } = await req.json()
    if (!booking_id) {
      throw new Error('Booking ID is required')
    }

    console.log("üìã Booking ID:", booking_id);

    // Initialize Supabase client with the service key
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      { auth: { persistSession: false } }
    )

    // Fetch booking details with associated equipment and renter
    console.log("üîç R√©cup√©ration des donn√©es de r√©servation...");
    const { data: booking, error: bookingError } = await supabaseAdmin
      .from('bookings')
      .select('*')
      .eq('id', booking_id)
      .single()

    if (bookingError) {
      console.error("‚ùå Erreur r√©cup√©ration r√©servation:", bookingError);
      throw bookingError;
    }
    if (!booking) {
      console.error("‚ùå R√©servation non trouv√©e");
      throw new Error('Booking not found');
    }

    console.log("‚úÖ R√©servation trouv√©e:", booking.id);

    // ‚úÖ √âTAPE 2: R√©cup√©rer l'√©quipement
    const { data: equipment, error: equipmentError } = await supabaseAdmin
      .from('equipments')
      .select('*')
      .eq('id', booking.equipment_id)
      .single()

    if (equipmentError) {
      console.error("‚ùå Erreur r√©cup√©ration √©quipement:", equipmentError);
      throw equipmentError;
    }

    console.log("üè† √âquipement:", equipment?.title);

    // ‚úÖ √âTAPE 3: R√©cup√©rer le locataire
    const { data: renter, error: renterError } = await supabaseAdmin
      .from('profiles')
      .select('*')
      .eq('id', booking.renter_id)
      .single()

    if (renterError) {
      console.error("‚ùå Erreur r√©cup√©ration locataire:", renterError);
      throw renterError;
    }

    console.log("üë§ Locataire:", renter?.first_name, renter?.last_name);

    // ‚úÖ √âTAPE 4: R√©cup√©rer le propri√©taire
    console.log("üîç R√©cup√©ration du propri√©taire...");
    const { data: ownerProfile, error: ownerError } = await supabaseAdmin
      .from('profiles')
      .select('*')
      .eq('id', equipment.owner_id)
      .single()

    if (ownerError) {
      console.error("‚ùå Erreur r√©cup√©ration propri√©taire:", ownerError);
      throw ownerError;
    }

    console.log("‚úÖ Propri√©taire trouv√©:", ownerProfile?.first_name, ownerProfile?.last_name);

    // ‚úÖ √âTAPE 5: Assembler les donn√©es compl√®tes
    const bookingComplete = {
      ...booking,
      equipment: equipment,
      renter: renter
    };
    // Generate PDF contract
    console.log("üìÑ G√©n√©ration du PDF...");
    const doc = new jsPDF()
    
    // Set up fonts and colors
    doc.setFont('helvetica')
    
    // Contract title
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.text('CONTRAT DE LOCATION DE MAT√âRIEL', 105, 20, { align: 'center' })
    
    // Contract reference
    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text(`R√©f√©rence: ${booking.id}`, 105, 30, { align: 'center' })
    doc.text(`Date: ${format(new Date(), 'dd/MM/yyyy', { locale: fr })}`, 105, 35, { align: 'center' })
    
    // Parties information
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('PARTIES AU CONTRAT', 20, 50)
    
    // Owner information
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('PROPRI√âTAIRE (Bailleur)', 20, 60)
    doc.setFont('helvetica', 'normal')
    doc.text(`Nom et Pr√©nom: ${ownerProfile.first_name || ''} ${ownerProfile.last_name || ''}`, 30, 70)
    doc.text(`T√©l√©phone: ${ownerProfile.phone_number || 'Non sp√©cifi√©'}`, 30, 75)
    doc.text(`Adresse: ${ownerProfile.address || 'Non sp√©cifi√©e'}`, 30, 80)
    doc.text(`Ville: ${ownerProfile.city || ''}, ${ownerProfile.country || ''}`, 30, 85)
    if (ownerProfile.id_number) {
      doc.text(`Pi√®ce d'identit√©: ${ownerProfile.id_number}`, 30, 90)
    }
    
    // Renter information
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('LOCATAIRE (Preneur)', 20, 105)
    doc.setFont('helvetica', 'normal')
    doc.text(`Nom et Pr√©nom: ${booking.renter.first_name || ''} ${booking.renter.last_name || ''}`, 30, 115)
    doc.text(`T√©l√©phone: ${booking.renter.phone_number || 'Non sp√©cifi√©'}`, 30, 120)
    doc.text(`Adresse: ${booking.renter.address || 'Non sp√©cifi√©e'}`, 30, 125)
    doc.text(`Ville: ${booking.renter.city || ''}, ${booking.renter.country || ''}`, 30, 130)
    if (booking.renter.id_number) {
      doc.text(`Pi√®ce d'identit√©: ${booking.renter.id_number}`, 30, 135)
    }
    
    // Equipment information
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('OBJET DE LA LOCATION', 20, 150)
    doc.setFont('helvetica', 'normal')
    doc.text(`D√©signation: ${booking.equipment.title}`, 30, 160)
    doc.text(`Description: ${booking.equipment.description}`, 30, 165, { maxWidth: 160 })
    if (booking.equipment.brand) doc.text(`Marque: ${booking.equipment.brand}`, 30, 175)
    if (booking.equipment.year) doc.text(`Ann√©e: ${booking.equipment.year}`, 30, 180)
    doc.text(`√âtat: ${booking.equipment.condition || 'Bon √©tat'}`, 30, 185)
    
    // Rental terms
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('CONDITIONS DE LOCATION', 20, 200)
    doc.setFont('helvetica', 'normal')
    doc.text(`P√©riode de location: du ${format(new Date(booking.start_date), 'dd/MM/yyyy', { locale: fr })} au ${format(new Date(booking.end_date), 'dd/MM/yyyy', { locale: fr })}`, 30, 210)
    doc.text(`Prix de location: ${booking.total_price} FCFA`, 30, 215)
    doc.text(`Caution (remboursable): ${booking.deposit_amount} FCFA`, 30, 220)
    doc.text(`Montant total √† payer: ${booking.total_price + booking.deposit_amount} FCFA`, 30, 225)
    
    // Terms and conditions
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text('CLAUSES ET CONDITIONS', 20, 240)
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    
    const terms = [
      '1. Le locataire s\'engage √† utiliser le mat√©riel conform√©ment √† sa destination et dans les r√®gles de l\'art.',
      '2. Le locataire est enti√®rement responsable du mat√©riel pendant toute la dur√©e de la location.',
      '3. Tout dommage, perte ou vol du mat√©riel sera √† la charge du locataire.',
      '4. La caution sera restitu√©e apr√®s v√©rification du bon √©tat du mat√©riel lors de sa restitution.',
      '5. Tout retard dans la restitution entra√Ænera des p√©nalit√©s suppl√©mentaires.',
      '6. Le locataire doit √™tre couvert par une assurance responsabilit√© civile.',
      '7. Les parties conviennent de r√©gler tout litige √† l\'amiable avant tout recours judiciaire.'
    ]
    
    let yPosition = 250
    terms.forEach(term => {
      doc.text(term, 30, yPosition, { maxWidth: 150 })
      yPosition += 10
    })
    
    // Signatures
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('SIGNATURES', 20, yPosition + 20)
    
    // Signature boxes
    doc.setFont('helvetica', 'normal')
    doc.text('Le Propri√©taire', 40, yPosition + 35)
    doc.text('Le Locataire', 140, yPosition + 35)
    
    // Date and location
    doc.text(`Fait √† ${booking.equipment.city || ''}, le ${format(new Date(), 'dd/MM/yyyy', { locale: fr })}`, 20, yPosition + 50)
    
    // Generate Base64 PDF
    console.log("‚úÖ PDF g√©n√©r√© avec succ√®s");
    const pdfBase64 = doc.output('datauristring')
    
    // Return the PDF Base64 string
    return new Response(
      JSON.stringify({
        pdf: pdfBase64
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration contrat:', error)
    
    return new Response(
      JSON.stringify({ error: error.message }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400 
      }
    )
  }
})
