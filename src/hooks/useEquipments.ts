// src/hooks/useEquipments.ts - Version corrig√©e
import { useState, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from "@/hooks/use-toast";
import { EquipmentData } from '@/types/supabase';
import { useAuth } from '@/hooks/auth';
import { EQUIPMENT_CATEGORIES, validateCategory } from '@/data/categories';

interface AddEquipmentData {
  title: string;
  description: string;
  daily_price: number;
  deposit_amount?: number;
  category: string;
  subcategory?: string;
  condition?: string;
  brand?: string;
  year?: number;
  location?: string;
  city?: string;
  country?: string;
}

interface AddEquipmentResult {
  success: boolean;
  data?: EquipmentData;
  error?: any;
  errorCode?: string;
  errorDetails?: string;
}

export function useEquipments() {
  const { user } = useAuth();
  const [isLoading, setIsLoading] = useState(false);

  // Fonction de validation des donn√©es d'entr√©e
  const validateEquipmentData = (data: AddEquipmentData): { valid: boolean; errors: string[] } => {
    const errors: string[] = [];

    // Validation des champs obligatoires
    if (!data.title?.trim()) {
      errors.push("Le titre est obligatoire");
    } else if (data.title.trim().length < 3) {
      errors.push("Le titre doit contenir au moins 3 caract√®res");
    } else if (data.title.trim().length > 100) {
      errors.push("Le titre ne peut pas d√©passer 100 caract√®res");
    }

    if (!data.description?.trim()) {
      errors.push("La description est obligatoire");
    } else if (data.description.trim().length < 10) {
      errors.push("La description doit contenir au moins 10 caract√®res");
    } else if (data.description.trim().length > 1000) {
      errors.push("La description ne peut pas d√©passer 1000 caract√®res");
    }

    if (!data.daily_price || data.daily_price <= 0) {
      errors.push("Le prix journalier doit √™tre sup√©rieur √† 0");
    } else if (data.daily_price > 1000000) {
      errors.push("Le prix journalier ne peut pas d√©passer 1 000 000 FCFA");
    }

    if (data.deposit_amount !== undefined && data.deposit_amount < 0) {
      errors.push("Le montant de la caution ne peut pas √™tre n√©gatif");
    }

    if (!data.category) {
      errors.push("La cat√©gorie est obligatoire");
    } else if (!validateCategory(data.category)) {
      errors.push("La cat√©gorie s√©lectionn√©e n'est pas valide");
    }

    if (data.year !== undefined && (data.year < 1900 || data.year > new Date().getFullYear() + 1)) {
      errors.push("L'ann√©e doit √™tre comprise entre 1900 et l'ann√©e prochaine");
    }

    return { valid: errors.length === 0, errors };
  };

  // Fonction pour normaliser les donn√©es avant insertion
  const normalizeEquipmentData = (data: AddEquipmentData, userId: string) => {
    return {
      title: data.title.trim(),
      description: data.description.trim(),
      daily_price: Number(data.daily_price),
      deposit_amount: data.deposit_amount ? Number(data.deposit_amount) : 0,
      category: data.category,
      subcategory: data.subcategory?.trim() || null,
      condition: data.condition || 'bon',
      brand: data.brand?.trim() || null,
      year: data.year ? Number(data.year) : null,
      location: data.location?.trim() || '',
      city: data.city?.trim() || 'Cotonou',
      country: data.country?.trim() || 'B√©nin',
      status: 'disponible',
      owner_id: userId
    };
  };

  // Fonction principale d'ajout d'√©quipement
  const addEquipment = useCallback(async (equipmentData: AddEquipmentData): Promise<AddEquipmentResult> => {
    // V√©rification pr√©liminaire de l'utilisateur
    if (!user?.id) {
      console.error("‚ùå Utilisateur non connect√©");
      toast({
        title: "Erreur d'authentification",
        description: "Vous devez √™tre connect√© pour ajouter un √©quipement.",
        variant: "destructive",
      });
      return { 
        success: false, 
        error: "Utilisateur non connect√©",
        errorCode: "AUTH_REQUIRED"
      };
    }

    setIsLoading(true);

    try {
      console.log("üìù D√©but de l'ajout d'√©quipement:", equipmentData);

      // √âtape 1: Validation des donn√©es
      const validation = validateEquipmentData(equipmentData);
      if (!validation.valid) {
        const errorMessage = validation.errors.join(", ");
        console.error("‚ùå Validation √©chou√©e:", validation.errors);
        
        toast({
          title: "Donn√©es invalides",
          description: errorMessage,
          variant: "destructive",
        });
        
        return { 
          success: false, 
          error: errorMessage,
          errorCode: "VALIDATION_FAILED"
        };
      }

      // √âtape 2: V√©rification de la session utilisateur
      const { data: sessionData, error: sessionError } = await supabase.auth.getUser();
      if (sessionError || !sessionData.user) {
        console.error("‚ùå Session invalide:", sessionError);
        toast({
          title: "Session expir√©e",
          description: "Veuillez vous reconnecter pour continuer.",
          variant: "destructive",
        });
        return { 
          success: false, 
          error: "Session invalide",
          errorCode: "SESSION_INVALID"
        };
      }

      // √âtape 3: Normalisation des donn√©es
      const insertData = normalizeEquipmentData(equipmentData, user.id);
      console.log("üì¶ Donn√©es normalis√©es pour insertion:", insertData);

      // √âtape 4: V√©rification des contraintes m√©tier
      // V√©rifier si l'utilisateur a un profil complet
      const { data: userProfile, error: profileError } = await supabase
        .from('profiles')
        .select('first_name, last_name, city')
        .eq('user_id', user.id)
        .single();

      if (profileError || !userProfile?.first_name || !userProfile?.last_name) {
        console.warn("‚ö†Ô∏è Profil utilisateur incomplet:", profileError);
        toast({
          title: "Profil incomplet",
          description: "Veuillez compl√©ter votre profil avant d'ajouter un √©quipement.",
          variant: "destructive",
        });
        return { 
          success: false, 
          error: "Profil incomplet",
          errorCode: "PROFILE_INCOMPLETE"
        };
      }

      // √âtape 5: Insertion dans la base de donn√©es
      const { data: insertedData, error: insertError } = await supabase
        .from('equipments')
        .insert(insertData)
        .select(`
          *,
          owner:profiles!equipments_owner_id_fkey(*)
        `)
        .single();

      if (insertError) {
        console.error("‚ùå Erreur lors de l'insertion:", insertError);
        
        // Analyse d√©taill√©e de l'erreur
        const { message, solution } = analyzeInsertError(insertError);
        
        toast({
          title: "Erreur lors de l'ajout",
          description: message,
          variant: "destructive",
        });
        
        return { 
          success: false, 
          error: insertError,
          errorCode: insertError.code,
          errorDetails: solution
        };
      }

      if (!insertedData) {
        console.error("‚ùå Aucune donn√©e retourn√©e apr√®s insertion");
        toast({
          title: "Erreur inattendue",
          description: "L'√©quipement n'a pas pu √™tre cr√©√© correctement.",
          variant: "destructive",
        });
        return { 
          success: false, 
          error: "Aucune donn√©e retourn√©e",
          errorCode: "NO_DATA_RETURNED"
        };
      }

      // √âtape 6: V√©rification post-insertion
      const { data: verificationData, error: verificationError } = await supabase
        .from('equipments')
        .select('id, title, status, owner_id')
        .eq('id', insertedData.id)
        .single();

      if (verificationError || !verificationData) {
        console.warn("‚ö†Ô∏è V√©rification √©chou√©e mais √©quipement cr√©√©:", verificationError);
        // Ne pas consid√©rer cela comme une erreur critique
      }

      console.log("‚úÖ √âquipement cr√©√© avec succ√®s:", insertedData);

      // Toast de succ√®s avec d√©tails
      toast({
        title: "üéâ √âquipement ajout√© avec succ√®s !",
        description: (
          <div>
            <p className="font-medium">"{insertedData.title}"</p>
            <p className="text-sm text-gray-600">
              Cat√©gorie: {EQUIPMENT_CATEGORIES[insertedData.category]?.name || insertedData.category}
            </p>
            <p className="text-sm text-gray-600">
              Prix: {insertedData.daily_price.toLocaleString()} FCFA/jour
            </p>
          </div>
        ),
        duration: 5000,
      });

      return { 
        success: true, 
        data: insertedData as EquipmentData 
      };

    } catch (error) {
      console.error("‚ùå Erreur compl√®te lors de l'ajout:", error);
      
      let errorMessage = "Une erreur inattendue s'est produite.";
      let errorCode = "UNKNOWN_ERROR";
      
      if (error instanceof Error) {
        errorMessage = error.message;
        if (error.message.includes('network')) {
          errorCode = "NETWORK_ERROR";
          errorMessage = "Probl√®me de connexion r√©seau. V√©rifiez votre connexion internet.";
        } else if (error.message.includes('timeout')) {
          errorCode = "TIMEOUT_ERROR";
          errorMessage = "La requ√™te a pris trop de temps. R√©essayez dans quelques instants.";
        }
      }

      toast({
        title: "Erreur critique",
        description: `Impossible d'ajouter l'√©quipement: ${errorMessage}`,
        variant: "destructive",
      });

      return { 
        success: false, 
        error,
        errorCode,
        errorDetails: errorMessage
      };
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  // Fonction d'analyse des erreurs d'insertion
  const analyzeInsertError = (error: any): { message: string; solution: string } => {
    switch (error.code) {
      case '23505':
        return {
          message: "Un √©quipement avec ce nom existe d√©j√† dans votre liste.",
          solution: "Modifiez le titre de votre √©quipement pour le rendre unique."
        };
      
      case '23502':
        return {
          message: "Certaines informations obligatoires sont manquantes.",
          solution: "V√©rifiez que tous les champs requis sont remplis."
        };
      
      case '42501':
        return {
          message: "Permissions insuffisantes pour cr√©er cet √©quipement.",
          solution: "Reconnectez-vous et v√©rifiez vos droits d'acc√®s."
        };
      
      case '23503':
        return {
          message: "R√©f√©rence invalide dans les donn√©es fournies.",
          solution: "V√©rifiez que la cat√©gorie s√©lectionn√©e est valide."
        };
      
      case 'PGRST301':
        return {
          message: "Politique de s√©curit√©: cr√©ation non autoris√©e.",
          solution: "Contactez l'administrateur pour v√©rifier vos permissions."
        };
      
      default:
        return {
          message: error.message || "Erreur inconnue lors de la cr√©ation.",
          solution: "R√©essayez dans quelques instants ou contactez le support."
        };
    }
  };

  // Fonction pour r√©cup√©rer les √©quipements de l'utilisateur
  const fetchUserEquipments = useCallback(async (): Promise<EquipmentData[]> => {
    if (!user?.id) {
      console.log("‚ùå Aucun utilisateur connect√© pour r√©cup√©rer les √©quipements");
      return [];
    }
    
    setIsLoading(true);
    
    try {
      console.log("üîç R√©cup√©ration des √©quipements pour l'utilisateur:", user.id);
      
      const { data, error } = await supabase
        .from('equipments')
        .select(`
          *,
          images:equipment_images(*),
          owner:profiles!equipments_owner_id_fkey(*)
        `)
        .eq('owner_id', user.id)
        .order('created_at', { ascending: false });
      
      if (error) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des √©quipements:", error);
        throw error;
      }
      
      console.log("‚úÖ √âquipements r√©cup√©r√©s:", data?.length || 0);
      
      const equipments = data as EquipmentData[];
      
      // Enrichir avec le nombre de r√©servations
      if (equipments && equipments.length > 0) {
        for (const equipment of equipments) {
          try {
            const { count, error: countError } = await supabase
              .from('bookings')
              .select('*', { count: 'exact', head: true })
              .eq('equipment_id', equipment.id);
              
            if (!countError) {
              equipment.booking_count = count || 0;
            }
          } catch (countError) {
            console.warn("‚ö†Ô∏è Erreur lors du comptage des r√©servations:", countError);
            equipment.booking_count = 0;
          }
        }
      }
      
      return equipments || [];
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des mat√©riels:", error);
      toast({
        title: "Erreur de chargement",
        description: "Impossible de charger vos √©quipements. R√©essayez dans quelques instants.",
        variant: "destructive",
      });
      return [];
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  // Fonction pour mettre √† jour un √©quipement
  const updateEquipment = useCallback(async (
    id: string, 
    equipmentData: Partial<AddEquipmentData>
  ): Promise<{ success: boolean; error?: any }> => {
    if (!user?.id) {
      return { success: false, error: "Utilisateur non connect√©" };
    }
    
    setIsLoading(true);
    
    try {
      const { error } = await supabase
        .from('equipments')
        .update(equipmentData)
        .eq('id', id)
        .eq('owner_id', user.id); // S√©curit√©: seulement ses propres √©quipements
      
      if (error) {
        throw error;
      }
      
      toast({
        title: "√âquipement mis √† jour",
        description: "Les informations de votre √©quipement ont √©t√© mises √† jour avec succ√®s.",
      });
      
      return { success: true };
    } catch (error) {
      console.error("‚ùå Erreur lors de la mise √† jour:", error);
      toast({
        title: "Erreur de mise √† jour",
        description: "Impossible de mettre √† jour l'√©quipement: " + (error as Error).message,
        variant: "destructive",
      });
      return { success: false, error };
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  // Fonction pour supprimer un √©quipement
  const deleteEquipment = useCallback(async (id: string): Promise<{ success: boolean; error?: any }> => {
    if (!user?.id) {
      return { success: false, error: "Utilisateur non connect√©" };
    }
    
    setIsLoading(true);
    
    try {
      // V√©rifier les r√©servations actives avant suppression
      const { data: activeBookings, error: bookingError } = await supabase
        .from('bookings')
        .select('id')
        .eq('equipment_id', id)
        .in('status', ['pending', 'confirmed', 'ongoing']);
      
      if (bookingError) {
        throw bookingError;
      }
      
      if (activeBookings && activeBookings.length > 0) {
        toast({
          title: "Suppression impossible",
          description: "Cet √©quipement a des r√©servations actives. Annulez-les d'abord.",
          variant: "destructive",
        });
        return { success: false, error: "R√©servations actives" };
      }
      
      const { error } = await supabase
        .from('equipments')
        .delete()
        .eq('id', id)
        .eq('owner_id', user.id); // S√©curit√©: seulement ses propres √©quipements
      
      if (error) {
        throw error;
      }
      
      toast({
        title: "√âquipement supprim√©",
        description: "Votre √©quipement a √©t√© supprim√© avec succ√®s.",
      });
      
      return { success: true };
    } catch (error) {
      console.error("‚ùå Erreur lors de la suppression:", error);
      toast({
        title: "Erreur de suppression",
        description: "Impossible de supprimer l'√©quipement: " + (error as Error).message,
        variant: "destructive",
      });
      return { success: false, error };
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  return {
    addEquipment,
    fetchUserEquipments,
    updateEquipment,
    deleteEquipment,
    isLoading
  };
}