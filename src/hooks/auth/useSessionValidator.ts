
import { useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { User } from '@supabase/supabase-js';
import { toast } from "@/components/ui/use-toast";

/**
 * Hook pour valider les sessions utilisateur
 * avec une logique am√©lior√©e pour √©viter les boucles infinies
 */
export function useSessionValidator() {
  // Fonction pour v√©rifier si la session est toujours valide
  const validateSession = useCallback(async (user: User | null): Promise<boolean> => {
    if (!user) {
      console.log("‚ö†Ô∏è Aucun utilisateur fourni pour la validation de session");
      return false;
    }
    
    try {
      console.log(`üîç Validation de la session pour ${user.email}`);
      const { data, error } = await supabase.auth.getSession();
      
      if (error) {
        console.warn("‚ö†Ô∏è Erreur lors de la validation de la session:", error.message);
        return false;
      }
      
      if (!data.session) {
        console.warn("‚ö†Ô∏è Session invalide ou expir√©e");
        return false;
      }
      
      // V√©rification suppl√©mentaire: s'assurer que l'ID utilisateur correspond
      if (data.session.user.id !== user.id) {
        console.warn("‚ö†Ô∏è Incoh√©rence d'ID utilisateur d√©tect√©e lors de la validation");
        return false;
      }
      
      console.log("‚úÖ Session valid√©e avec succ√®s");
      return true;
    } catch (e) {
      console.error("‚ùå Exception lors de la validation de la session:", e);
      
      // Notification utilisateur seulement si l'erreur est grave
      if (e instanceof Error && e.message !== "Failed to fetch") {
        toast({
          title: "Erreur de validation",
          description: "Impossible de v√©rifier votre session. Veuillez vous reconnecter.",
          variant: "destructive",
        });
      }
      
      return false;
    }
  }, []);

  return {
    validateSession
  };
}
